# Staging Continuous Integration
name: staging continuous intregation

# GitHub Action 발생 조건 설정
on:
  pull_request:
    branches: [develop, staging, production]
  push:
    branches: [develop, staging, production]

env:
  RELEASE_REVISION: 'kbj-nestjs-backend-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ECR_REPOSITORY: staging-kbj-nestjs-backend

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.5.0]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # 현재 작업 중인 저장소를 가져와서 해당 작업을 수행하기 위한 기반 코드를 로컬 환경(Runner환경)에 다운로드
      - name: Checkout
        uses: actions/checkout@v3

      # SecrentManager에서 .env 생성
      - name: Get SecretManager by name
        run: |
          aws secretsmanager get-secret-value --secret-id STAGING_KBJ_NESTJS_BACKEND | 
          jq -r '.SecretString' > .env

      - name: Get Ready for Test
        run: npm install

      - name: Run Test
        run: npm run test

      - name: Slack Notification on Failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Staging Test Failed - kbj-nestjs-backend
          SLACK_MESSAGE: ${{ job.status }} - ${{ secrets.RELEASE_REVISION}} - https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

          MSG_MINIMAL: true
# https://github.com/kbj0109/kbj-nestjs-backend/actions/runs/8238319270/job/22529000615

# # GitHub Actions에서 AWS CLI를 사용할 수 있도록 AWS 계정 정보를 환경 변수로 설정
# - name: Configure AWS credentials
#   uses: aws-actions/configure-aws-credentials@v4
#   with:
#     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     aws-region: ${{ secrets.AWS_REGION }}

# # Amazon ECR에 로그인
# - name: Login to Amazon ECR
#   id: login-ecr
#   uses: aws-actions/amazon-ecr-login@v1

# - name: Build, tag, and push image to Amazon ECR
#   id: build-image
#   env:
#     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

#   run: |
#     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest"

# - name: Deploy on EC2 instance
#   uses: appleboy/ssh-action@v0.1.6
#   with:
#     host: ${{ env.EC2_IP_ADDRESS }}
#     username: ubuntu
#     key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#     script: |
#       cd /home/ubuntu/Eye_of_AI_Client
#       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       aws configure set region ${{ env.AWS_REGION }}
#       ECR_REGISTRY_LOGIN=$(aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }})
#       sudo docker stop ${{ env.ECR_REPOSITORY }} || true
#       sudo docker rm ${{ env.ECR_REPOSITORY }} || true
#       sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
#       sudo docker run -d --name eyeofai -p 3080:3080 ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
# - name: action-slack
#   uses: 8398a7/action-slack@v3
#   with:
#     status: ${{ job.status }} #job의 성공 여부
#     author_name: Sloth Backend - dev #알림 메시지의 제목으로 사용될 이름
#     fields: repo,commit,message,author #메시지에 보일 정보
#     mention: here #멘션할 대상 지정
#   env:
#     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
